import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import asyncio
from datetime import datetime
from aiohttp import web

# –ö–æ–Ω—Ñ–∏–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8283929613:AAGsabwYn_34VBsEwByIFB3F11OMYQcr-X0"
ADMIN_CHAT_ID = -1003098912428
PORT = int(os.getenv('PORT', 8000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å https://yourapp.onrender.com

worker_responses = {}

class TelegramWorkerBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()

    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        welcome_text = (
            "–í–∞—Å –≤—ñ—Ç–∞—î –ú–∞—Ä–∫–µ –ü–æ—Å–ª—É–≥ ‚Ññ1! üòä\n\n"
            "–ó–∞–ª–∏—à—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—å–æ–≥–æ, —â–æ –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ!"
        )
        worker_responses[update.effective_user.id] = {
            'stage': 'ask_name',
            'data': {},
            'timestamp': datetime.now()
        }
        await update.message.reply_text(welcome_text)
        await update.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ —ñ–º'—è üìù")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = (
            "ü§ñ **Worker Request Bot Help**\n\n"
            "**–ö–æ–º–∞–Ω–¥–∏:**\n"
            "‚Ä¢ /start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n"
            "‚Ä¢ /help - –î–æ–ø–æ–º–æ–≥–∞\n\n"
            "**–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:**\n"
            "1. –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è\n"
            "2. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è\n"
            "3. –ó–∞—è–≤–∫–∞ –Ω–∞–¥—ñ–π–¥–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –ø–æ—á–∞—Ç–∏!"
        )
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        message_text = update.message.text.strip()

        if user_id not in worker_responses:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏.")
            return

        user_session = worker_responses[user_id]
        stage = user_session['stage']

        if stage == 'ask_name':
            user_session['data']['name'] = message_text
            user_session['stage'] = 'ask_object'
            await update.message.reply_text("–í–∞—à–µ —ñ–º'—è –ø—Ä–∏–π–Ω—è—Ç–æ! üòä\n\n–ù–∞ —è–∫–∏–π –æ–±‚Äô—î–∫—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ –º–∞—Ç–µ—Ä—ñ–∞–ª/—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç? üèóÔ∏è")

        elif stage == 'ask_object':
            user_session['data']['object'] = message_text
            user_session['stage'] = 'ask_material'
            await update.message.reply_text("–Ø–∫–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª/—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ—Ç—Ä—ñ–±–µ–Ω? üß∞")

        elif stage == 'ask_material':
            user_session['data']['material'] = message_text
            user_session['stage'] = 'ask_deadline'

            keyboard = [
                [InlineKeyboardButton("üî¥ –¢–µ—Ä–º—ñ–Ω–æ–≤–æ –¥–æ 1 –≥–æ–¥–∏–Ω–∏", callback_data="deadline_urgent")],
                [InlineKeyboardButton("üü° –î–æ 18:00", callback_data="deadline_today")],
                [InlineKeyboardButton("üü¢ –ó–∞–≤—Ç—Ä–∞ –¥–æ 12:00", callback_data="deadline_tomorrow")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–ù–∞ –∫–æ–ª–∏ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ? ‚è∞", reply_markup=reply_markup)

        elif stage == 'ask_additional':
            user_session['data']['additional_info'] = message_text
            await self.send_request(update, context, user_id)

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        data = query.data

        if user_id not in worker_responses:
            await query.edit_message_text("–°–µ—Å—ñ—è –≤—Ç—Ä–∞—á–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /start —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ.")
            return

        if data.startswith("deadline_"):
            deadline_map = {
                "deadline_urgent": "–¢–µ—Ä–º—ñ–Ω–æ–≤–æ –¥–æ 1 –≥–æ–¥–∏–Ω–∏ üî¥",
                "deadline_today": "–î–æ 18:00 üü°",
