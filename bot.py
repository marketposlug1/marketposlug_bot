import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import asyncio
from datetime import datetime
from aiohttp import web

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8283929613:AAGsabwYn_34VBsEwByIFB3F11OMYQcr-X0"
ADMIN_CHAT_ID = -1003098912428
PORT = int(os.getenv('PORT', 8000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')  # –ü—Ä–∏–º–µ—Ä: https://yourapp.onrender.com

worker_responses = {}

class TelegramWorkerBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()

    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        welcome_text = (
            "–í–∞—Å –≤—ñ—Ç–∞—î –ú–∞—Ä–∫–µ –ü–æ—Å–ª—É–≥ ‚Ññ1! üòä\n\n"
            "–ó–∞–ª–∏—à—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—å–æ–≥–æ, —â–æ –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ!"
        )
        worker_responses[update.effective_user.id] = {'stage': 'ask_name', 'data': {}, 'timestamp': datetime.now()}
        await update.message.reply_text(welcome_text)
        await update.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ —ñ–º'—è üìù")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = (
            "ü§ñ **Worker Request Bot Help**\n\n"
            "**–ö–æ–º–∞–Ω–¥–∏:**\n"
            "‚Ä¢ /start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n"
            "‚Ä¢ /help - –î–æ–ø–æ–º–æ–≥–∞\n\n"
            "**–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:**\n"
            "1. –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è\n"
            "2. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è\n"
            "3. –ó–∞—è–≤–∫–∞ –Ω–∞–¥—ñ–π–¥–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –ø–æ—á–∞—Ç–∏!"
        )
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        message_text = update.message.text.strip()

        if user_id not in worker_responses:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏.")
            return

        user_session = worker_responses[user_id]
        stage = user_session['stage']

        if stage == 'ask_name':
            user_session['data']['name'] = message_text
            user_session['stage'] = 'ask_object'
            await update.message.reply_text("–í–∞—à–µ —ñ–º'—è –ø—Ä–∏–π–Ω—è—Ç–æ! üòä\n\n–ù–∞ —è–∫–∏–π –æ–±‚Äô—î–∫—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ –º–∞—Ç–µ—Ä—ñ–∞–ª/—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç? üèóÔ∏è")

        elif stage == 'ask_object':
            user_session['data']['object'] = message_text
            user_session['stage'] = 'ask_material'
            await update.message.reply_text("–Ø–∫–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª/—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ—Ç—Ä—ñ–±–µ–Ω? üß∞")

        elif stage == 'ask_material':
            user_session['data']['material'] = message_text
            user_session['stage'] = 'ask_deadline'

            keyboard = [
                [InlineKeyboardButton("üî¥ –¢–µ—Ä–º—ñ–Ω–æ–≤–æ –¥–æ 1 –≥–æ–¥–∏–Ω–∏", callback_data="deadline_urgent")],
                [InlineKeyboardButton("üü° –î–æ 18:00", callback_data="deadline_today")],
                [InlineKeyboardButton("üü¢ –ó–∞–≤—Ç—Ä–∞ –¥–æ 12:00", callback_data="deadline_tomorrow")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–ù–∞ –∫–æ–ª–∏ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ? ‚è∞", reply_markup=reply_markup)

        elif stage == 'ask_additional':
            user_session['data']['additional_info'] = message_text
            await self.send_request(update, context, user_id)

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ

        user_id = query.from_user.id
        data = query.data

        if user_id not in worker_responses:
            await query.edit_message_text("–°–µ—Å—ñ—è –≤—Ç—Ä–∞—á–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /start —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ.")
            return

        if data.startswith("deadline_"):
            deadline_map = {
                "deadline_urgent": "–¢–µ—Ä–º—ñ–Ω–æ–≤–æ –¥–æ 1 –≥–æ–¥–∏–Ω–∏ üî¥",
                "deadline_today": "–î–æ 18:00 üü°",
                "deadline_tomorrow": "–ó–∞–≤—Ç—Ä–∞ –¥–æ 12:00 üü¢"
            }
            selected_deadline = deadline_map.get(data, "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            worker_responses[user_id]['data']['deadline'] = selected_deadline
            worker_responses[user_id]['stage'] = 'ask_additional'

            await query.edit_message_text(
                f"–í–∏ –≤–∏–±—Ä–∞–ª–∏: {selected_deadline}\n\n"
                "–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–Ω–µ–º–∞' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è:"
            )

    async def send_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        data = worker_responses[user_id]['data']
        timestamp = worker_responses[user_id]['timestamp'].strftime("%Y-%m-%d %H:%M:%S")
        user = update.effective_user

        admin_message = (
            "üì¨ **–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ—Å–ª—É–≥—É**\n\n"
            f"üë§ **–Ü–º'—è:** {data.get('name', '-')}\n"
            f"üèóÔ∏è **–û–±'—î–∫—Ç:** {data.get('object', '-')}\n"
            f"üß∞ **–ú–∞—Ç–µ—Ä—ñ–∞–ª/—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:** {data.get('material', '-')}\n"
            f"‚è∞ **–¢–µ—Ä–º—ñ–Ω:** {data.get('deadline', '-')}\n"
            f"‚ÑπÔ∏è **–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:** {data.get('additional_info', '-')}\n\n"
            f"üÜî **ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:** {user_id}\n"
            f"üìÖ **–ü–æ–¥–∞–Ω–æ:** {timestamp}\n\n"
            "---\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} {user.last_name or ''} (@{user.username or '–Ω–µ–º–∞—î_—é–∑–µ—Ä–Ω–µ–π–º–∞'})"
        )

        try:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message, parse_mode='Markdown')
            await update.message.reply_text(
                "‚úÖ **–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞!**\n\n"
                "–î—è–∫—É—î–º–æ! –ß–µ–∫–∞–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                parse_mode='Markdown'
            )
            del worker_responses[user_id]
        except Exception as e:
            logger.error(f"Error sending to admin: {e}")
            await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    async def run_webhook(self):
        from aiohttp import web

        async def handle_post(request):
            data = await request.json()
            update = Update.de_json(data, self.application.bot)
            await self.application.update_queue.put(update)
            return web.Response(text="OK")

        async def handle_get(request):
            return web.Response(text="Webhook endpoint is working!")

        async def handle_health(request):
            return web.Response(text="OK")

        app = web.Application()
        app.router.add_post('/webhook', handle_post)
        app.router.add_get('/webhook', handle_get)
        app.router.add_get('/health', handle_health)

        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', PORT)
        await site.start()

        webhook_url = f"{WEBHOOK_URL}/webhook"
        await self.application.bot.set_webhook(webhook_url)
        logger.info(f"Webhook set: {webhook_url}")

        await self.application.initialize()
        await self.application.start()

        logger.info("Bot started with webhook")

        while True:
            await asyncio.sleep(3600)

    async def run_polling(self):
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        logger.info("Bot started with polling")
        stop_event = asyncio.Event()

        def stop():
            stop_event.set()

        import signal
        for s in (signal.SIGINT, signal.SIGTERM):
            signal.signal(s, lambda signum, frame: stop())
        await stop_event.wait()

async def main():
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN environment variable is required!")
        return
    if not ADMIN_CHAT_ID:
        logger.error("ADMIN_CHAT_ID environment variable is required!")
        return

    bot = TelegramWorkerBot()

    if WEBHOOK_URL:
        await bot.run_webhook()
    else:
        await bot.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
