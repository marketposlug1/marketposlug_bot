import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import asyncio

logging.basicConfig(level=logging.INFO)

TOKEN = "8283929613:AAGsabwYn_34VBsEwByIFB3F11OMYQcr-X0"
MANAGER_CHAT_ID = -1003098912428  # –í–∞—à —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –í–æ–ø—Ä–æ—Å—ã
questions = [
    "–í–∞—à–µ —ñ–º'—è üìù",
    "–ù–∞ —è–∫–∏–π –æ–±'—î–∫—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ –º–∞—Ç–µ—Ä—ñ–∞–ª/—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç? üèóÔ∏è",
    "–ù–∞ –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ? ‚è∞",
]

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
deadline_buttons = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–¢–µ—Ä–º—ñ–Ω–æ–≤–æ –¥–æ 1 –≥–æ–¥–∏–Ω–∏ ‚è±Ô∏è")],
        [KeyboardButton(text="–î–æ 18:00 üïï")],
        [KeyboardButton(text="–ó–∞–≤—Ç—Ä–∞ –¥–æ üå§Ô∏è")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# /start
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {"step": 0, "answers": []}
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –î–∞–≤–∞–π –∑–∞–ø–æ–≤–Ω–∏–º–æ –∑–∞—è–≤–∫—É –¥–ª—è –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤/—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤.")
    await message.answer(questions[0])

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏.")
        return

    step = user_data[user_id]["step"]
    user_data[user_id]["answers"].append(message.text)

    if step == 0:
        user_data[user_id]["step"] += 1
        await message.answer(questions[1])
    elif step == 1:
        user_data[user_id]["step"] += 1
        await message.answer(questions[2])
    elif step == 2:
        user_data[user_id]["step"] += 1
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç —Ç–µ—Ä–º—ñ–Ω—É:", reply_markup=deadline_buttons)
    elif step == 3:
        user_data[user_id]["step"] += 1
        user_data[user_id]["answers"].append(message.text)
        answers = user_data[user_id]["answers"]
        text = (
            f"–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ {answers[0]}:\n"
            f"–û–±'—î–∫—Ç: {answers[1]}\n"
            f"–ù–∞ –∫–æ–ª–∏: {answers[2]}\n"
            f"–¢–µ—Ä–º—ñ–Ω: {answers[3]}"
        )
        await bot.send_message(MANAGER_CHAT_ID, text)
        await message.answer("–î—è–∫—É—î–º–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ ‚úÖ", reply_markup=ReplyKeyboardRemove())
        user_data.pop(user_id)

if __name__ == "__main__":
    import asyncio
    from aiogram import executor

    asyncio.run(dp.start_polling(bot))
